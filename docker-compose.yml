version: "3"

services:
  redis:
    container_name: "redis"
    image: "redis:alpine"

  postgres:
    container_name: "postgres"
    user: postgres
    build: ./docker/postgres
    ports:
      - "5432:5432"
    volumes:
      - ./docker/postgres:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_MULTIPLE_DATABASES: serverdev,servertest
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: pass
    healthcheck:
      test: ["CMD-SHELL", "pg_isready","-u", "postgres", "-d", "serverdev"]
      interval: 1s
      timeout: 60s
      retries: 5
      start_period: 80s  

  rabbitmq:
    container_name: "rabbitmq"
    image: rabbitmq:3-management
    ports:
      - "8080:5672"
    environment:
      RABBITMQ_DEFAULT_PASS: pass
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_VHOST: vhost

  server:
    container_name: "server"
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "127.0.0.1:10020:10020"
      - "9229:9229"
    expose:
      - 9229
    volumes:
      - ./server:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      - redis
      - postgres
      - migrate
      - rabbitmq
    env_file:
      - ./server/.env
    command:
      ["npm", "run", "dev"]

  worker:
    container_name: "worker"
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "127.0.0.1:10030:10030"
    expose:
      - 9229
    volumes:
      - type: bind
        source: ./server
        target: /usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      - redis
      - postgres
      - migrate
      - rabbitmq
    env_file:
      - ./server/.env
    command:
      ["npm", "run", "worker"]

  migrate:
    container_name: "migrate"
    build:
      context: ./server
      dockerfile: Dockerfile
    volumes:
      - ./server:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
        
    env_file:
      - ./server/.env
    command: ["npm", "run", "migrate:all"]

  ##  Uncomment if adding client
  # client:
  #   build: 
  #     context: ./client
  #     dockerfile: Dockerfile
  #   command: npm run dev
  #   volumes:
  #     - ./client:/usr/src/app
  #     - /usr/src/app/node_modules
  #   env_file:
  #     - path: ./client/.env
  #       required: false
  #   ports:
  #     - 3000:3000
  #     - 3010:3010
